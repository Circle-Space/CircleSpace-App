import { useGestures } from '../hooks/useGestures';
import { useZoomableLayout } from '../hooks/useZoomableLayout';
import { useZoomableHandle } from '../hooks/useZoomableHandle';
export const useZoomable = _ref => {
  let {
    minScale,
    maxScale,
    scale,
    doubleTapScale,
    maxPanPointers,
    isPanEnabled,
    isPinchEnabled,
    isSingleTapEnabled,
    isDoubleTapEnabled,
    onInteractionStart,
    onInteractionEnd,
    onPinchStart,
    onPinchEnd,
    onPanStart,
    onPanEnd,
    onSingleTap,
    onDoubleTap,
    onProgrammaticZoom,
    onResetAnimationEnd,
    onLayout,
    ref
  } = _ref;
  const {
    width,
    height,
    center,
    onZoomableLayout
  } = useZoomableLayout({
    onLayout
  });
  const {
    animatedStyle,
    gestures,
    reset,
    zoom
  } = useGestures({
    width,
    height,
    center,
    minScale,
    maxScale,
    scale,
    doubleTapScale,
    maxPanPointers,
    isPanEnabled,
    isPinchEnabled,
    isSingleTapEnabled,
    isDoubleTapEnabled,
    onInteractionStart,
    onInteractionEnd,
    onPinchStart,
    onPinchEnd,
    onPanStart,
    onPanEnd,
    onSingleTap,
    onDoubleTap,
    onProgrammaticZoom,
    onResetAnimationEnd
  });
  useZoomableHandle(ref, reset, zoom);
  return {
    animatedStyle,
    gestures,
    onZoomableLayout
  };
};
//# sourceMappingURL=useZoomable.js.map